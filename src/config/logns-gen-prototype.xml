<?xml version="1.0" encoding="UTF-8"?>
<generator_prototype xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.dima.tu-berlin.de/myriad/prototype">

  <!-- configurable parameters -->
  <parameters>
    <!-- naming conventions :                                                                   -->
    <!--   * general:          {generator_name}.{parameter_name}                                -->
    <!--   * sequence numbers: {generator_name}.sequence.base_cardinality                       -->
    <parameter key="node.sequence.base_cardinality">10000</parameter>
  </parameters>

  <!-- function configuration -->
  <functions>
    <!-- add 'function' elements here, supported probability types are:                         -->
    <!--   * uniform_probability[T](T: x_min, T: x_max)                                         -->
    <!--   * normal_probability[Decimal](Decimal: mean, Decimal: stddev)                        -->
    <!--   * combined_probability[T](String: path)                                              -->
    <!--   * conditional_combined_probability[T1;T2](String: path)                              -->
    <function key="Pr[node.batch_id]" type="uniform_probability[I64u]">
      <argument key='x_min' type='I64u' value='1' />
      <argument key='x_max' type='I64u' value='${%node.sequence.cardinality% / %node.sequence.base_cardinality% + 1}' />
    </function>
    <function key="Pr[node.level]" type="combined_probability[I16u]">
      <argument key='path' type='String' value='${%ENV.config-dir% + "/distributions/hierarchy/node/level.distribution"}' />
    </function>
    <function key="Pr[node.label]" type="conditional_combined_probability[I16u;Enum]">
      <argument key='path' type='String' value='${%ENV.config-dir% + "/distributions/hierarchy/node/label.distribution"}' />
    </function>
  </functions>

  <!-- enumeration types -->
  <enum_sets>
    <!-- add 'enum_set' types here; enum types elements have:                                   -->
    <!--   * an identifier attribute 'key'                                                      -->
    <!--   * a 'path' argument of type 'String'                                                 -->
    <!--     * can be written relative to the config-dir:                                       -->
    <!--     * ${%ENV.config-dir% + "/domains/package/subpackage/domain_name.domain"}           -->
    <enum_set key='node.label'>
      <argument key='path' type='String' value='${%ENV.config-dir% + "/domains/hierarchy/node/label.domain"}' />
    </enum_set>
  </enum_sets>

  <record_sequences>
    <random_sequence key="node">
      <record_type>
        <!-- add fields and references here, supported types are:                              -->
        <!--  * core types: Bool, Char, Decimal, Date, I16, I16u, I32, I32u, I64, I64u, String -->
        <!--  * enum types: Enum, with an additional enumref='{enum_set.key}' attribute        -->
        <!--  * ref. types: all record_sequence keys defined in this XML document              -->
        <field name='batch_id' type='I64u' />
        <field name='level' type='I16u' />
        <field name='label' type='Enum' enumref='node.label' />
        <field name='parent_id' type='I64u' />
      </record_type>
      <output_format type='csv'>
        <argument key='quoted' type='Bool' value='false' />
        <argument key='delimiter' type='Char' value='|' />
        <argument key='field' type='field_ref' ref='node:batch_id' />
        <argument key='field' type='field_ref' ref='node:level' />
        <argument key='field' type='field_ref' ref='node:label' />
        <argument key='field' type='field_ref' ref='node:parent_id' />
      </output_format>
      <setter_chain>
        <setter key='set_batch_id' type='field_setter'>
          <argument key='field' type='field_ref' ref='node:batch_id' />
          <argument key='value' type='clustered_value_provider[I64u]'>
            <argument key='probability' type='function_ref' ref='Pr[node.batch_id]' />
            <argument key='cardinality' type='const_range_provider[I64u]'>
              <argument key='min' type='I64u' value='0' />
              <argument key='max' type='I64u' value='%node.sequence.cardinality%' />
            </argument>
          </argument>
        </setter>
        <setter key='set_level' type='field_setter'>
          <argument key='field' type='field_ref' ref='node:level' />
          <argument key='value' type='clustered_value_provider[I16u]'>
            <argument key='probability' type='function_ref' ref='Pr[node.level]' />
            <argument key='cardinality' type='const_range_provider[I64u]'>
              <argument key='min' type='I64u' value='0' />
              <argument key='max' type='I64u' value='%node.sequence.base_cardinality%' />
            </argument>
          </argument>
        </setter>
        <setter key='set_label' type='field_setter'>
          <argument key='field' type='field_ref' ref='node:label' />
          <argument key='value' type='random_value_provider[Enum]'>
            <argument key='probability' type='function_ref' ref='Pr[node.label]' />
            <argument key='condition_field' type='field_ref' ref='node:level' />
          </argument>
        </setter>
        <setter key='set_parent_id' type='field_setter'>
          <argument key='field' type='field_ref' ref='node:parent_id' />
          <argument key='value' type='callback_value_provider[I16u]'>
            <argument key='name' type='String' value='setParentID' />
            <argument key='arity' type='I16u' value='0' />
          </argument>
        </setter>
      </setter_chain>
      <!-- supported cardinality estimator types are: -->
      <!--  * linear_scale_estimator(I64u: base_cardinality) -->
      <cardinality_estimator type="linear_scale_estimator">
        <argument key='base_cardinality' type='I64u' value='%node.sequence.base_cardinality%' />
      </cardinality_estimator>
      <!-- supported sequence_iterator types: -->
      <!--  * partitioned_iterator() -->
      <sequence_iterator type="partitioned_iterator" />
    </random_sequence>
  </record_sequences>
</generator_prototype>
